@import '/src/assets/scss/global';

@mixin min($bp, $max: 'null', $device: 'screen'){
  @if $max == 'null'{
    @media only #{$device} and (min-width: #{$bp}){
      @content;
    }
  } @else{
    @media only #{$device} and (min-width: #{$bp}) and (max-width: #{$max}){
      @content;
    }
  }
}

@function bp($bp){
  @return map-get($breakpoints, $bp);
}

$breakpoints:     (
  na: $min,
  xs: $mobile-min,
  sm: $tablet-port,
  md: $tablet-land,
  lg: $laptop-min,
  xl: $desktop-min,
  xxl: $desktop + 1,
);

@function container($container-size, $true-val: false){
  @return map-get($container-sizes, $container-size);
}

$container-sizes: (
  xs: map-get($breakpoints, sm) - 14px,
  sm: map-get($breakpoints, sm) - 28px,
  md: map-get($breakpoints, md) - 54px,
  lg: map-get($breakpoints, lg) - 100px,
  xl: map-get($breakpoints, xl) - 160px,
  xxl: map-get($breakpoints, xxl) - 160px
);

.container{
  padding-right: 1rem;
  padding-left:  1rem;

  &:not(.is-fluid){

    @each $bp, $container-size in $container-sizes{
      @include min(#{bp(#{$bp})}){
        width:     100%;
        max-width: container(#{$bp});
      }
    }
    margin: 0 auto;
  }
}

@each $bp, $container-size in $container-sizes{
  .container-#{$bp}{

    $i:            index($container-sizes, $bp $container-size);

    @for $j from $i through length($container-sizes){
      @include min(#{bp(nth(nth($container-sizes, $j), 1))}){
        max-width: container(#{nth(nth($container-sizes, $j), 1)});
      }
    }
    width:         100%;

    margin:        0 auto;
    padding-right: 1rem;
    padding-left:  1rem;
  }
}


